require 'json'
require 'yaml'

# Our custom YAML tags must retain their magic.
%w[ code ].each do |tag|
  YAML::add_builtin_type(tag) { |_,val| val.merge(:__tag__ => tag) }
end

desc 'Build all alternate versions of the specs.'
multitask :build => [ 'build:json' ]

namespace :build do
  note = 'Do not edit this file; changes belong in the appropriate YAML file.'

  desc 'Build JSON versions of the specs.'
  task :json do
    rm(Dir['specs/*.json'], :verbose => false)
    Dir.glob('specs/*.yml').each do |filename|
      json_file = filename.gsub('.yml', '.json')

      File.open(json_file, 'w') do |file|
        doc = YAML.load_file(filename)
        file << doc.merge(:__ATTN__ => note).to_json()
      end
    end
  end

  desc 'Build JavaScript versions of the specs.'
  task :javascript do
    require 'mustache'
    rm(Dir['spec/*.js'], :verbose => false)
    Dir.glob('specs/*.yml').each do |filename|
      js_file = filename.gsub('.yml', '_spec.js')
      context = filename.gsub('.yml', '')
      doc = YAML.load_file(filename)

      File.open(js_file, 'w') do |file|
        file << Mustache.render(JS_SPEC,
                                :tests => JSON.pretty_generate(doc['tests']))
      end
    end
  end
end

JS_SPEC = <<SPEC
// Require pistachio
var pistachio = require('../../pistachio.js');
var colors = require('colors');

// The specs, JSONified
var tests = {{{tests}}};

// Run the tests
for (var i = 0, len = tests.length; i < len; i++) {
  var test = tests[i];
  var error = undefined;
  var actual = undefined;

  try {
    var actual = pistachio.render(test['template'], test['data']);
  } catch(err) {
    var error = err;
  }

  if (error) {
    console.log(('[ERROR] ' + test.name + ': ' + test.desc).red);
    console.log('  ' + error.toString());
    break;
  } else if (actual !== test['expected']) {
    console.log(('[FAIL] ' + test.name + ': ' + test.desc).red);
    console.log(('  expected:').yellow);
    console.log('    ' + JSON.stringify(test.expected));
    console.log(('  actual:').yellow);
    console.log('    ' + JSON.stringify(actual));
    break;
  } else {
    console.log(('[PASS] ' + test.name + ': ' + test.desc).green);
  }
}
SPEC
